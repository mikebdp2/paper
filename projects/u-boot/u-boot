#!/bin/bash

# Copyright (C) 2016-2017 Paul Kocialkowski <contact@paulk.fr>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

arguments() {
	project_arguments_targets "$project" "$@"
}

usage() {
	project_usage_actions "$project" "config" "menuconfig" "defconfig" "image"
	project_usage_arguments "$project" "$@"
}

download() {
	local repository=$project

	project_download_git "$project" "$repository" "git://git.denx.de/u-boot.git" "$@"

	project_action "download" "crossgcc"
}

download_check() {
	local repository=$project

	project_download_check_git "$project" "$repository" "$@"
}

extract() {
	project_extract "$project" "$@"
}

extract_check() {
	project_extract_check "$project" "$@"
}

update() {
	local repository=$project

	project_update_git "$project" "$repository" "$@"
}

update_check() {
	local repository=$project

	project_update_check_git "$project" "$repository" "$@"
}

kconfig() {
	local action=$1
	shift

	local repository=$project

	requirements "swig" "dtc"

	project_sources_directory_missing_empty_error "$project" "$repository" "$@"

	if git_project_check "$repository"
	then
		git_project_checkout "$project" "$repository" "$@"
	fi

	local sources_path=$( project_sources_path "$project" "$repository" "$@" )
	local build_path=$( project_build_path "$project" "$@" )
	local defconfig_path="$build_path/defconfig"

	local config=$( u_boot_config "$@" )
	local arch=$( u_boot_arch "$@" )

	local crossgcc_bin_prefix=$( project_action "prefix" "crossgcc" "$arch" )

	project_action "build" "crossgcc" "$arch"

	mkdir -p "$build_path"

	case $action in
	"config")
		make -C "$sources_path" O="$build_path" ARCH="$arch" CROSS_COMPILE="$crossgcc_bin_prefix" "$config"
		;;
	"menuconfig")
		make -C "$sources_path" O="$build_path" ARCH="$arch" CROSS_COMPILE="$crossgcc_bin_prefix" "menuconfig"
		;;
	"defconfig")
		local confirm

		make -C "$sources_path" O="$build_path" ARCH="$arch" CROSS_COMPILE="$crossgcc_bin_prefix" "savedefconfig"

		printf "Diff:\n"
		diff -u "$config_path" "$defconfig_path" || true

		printf "Press enter to save defconfig: "
		read confirm

		cp "$defconfig_path" "$config_path"
		;;
	"image")
		make -C "$sources_path" O="$build_path" ARCH="$arch" CROSS_COMPILE="$crossgcc_bin_prefix"

		u_boot_install "$@"
		;;
	esac
}

config() {
	kconfig "config" "$@"
}

menuconfig() {
	kconfig "menuconfig" "$@"
}

defconfig() {
	kconfig "defconfig" "$@"
}

image() {
	kconfig "image" "$@"
}


build() {
	local repository=$project

	requirements "dtc"

	project_sources_directory_missing_empty_error "$project" "$repository" "$@"

	if git_project_check "$repository"
	then
		git_project_checkout "$project" "$repository" "$@"
	fi

	local sources_path=$( project_sources_path "$project" "$repository" "$@" )
	local build_path=$( project_build_path "$project" "$@" )

	local config=$( u_boot_config "$@" )
	local arch=$( u_boot_arch "$@" )

	local crossgcc_bin_prefix=$( project_action "prefix" "crossgcc" "$arch" )

	project_action "build" "crossgcc" "$arch"

	mkdir -p "$build_path"

	make -C "$sources_path" O="$build_path" ARCH="$arch" CROSS_COMPILE="$crossgcc_bin_prefix" "$config"
	make -C "$sources_path" O="$build_path" ARCH="$arch" CROSS_COMPILE="$crossgcc_bin_prefix"

	u_boot_install "$@"
}

build_check() {
	project_build_check "$project" "$@"
}

install() {
	project_install "$project" "$@"
}

install_check() {
	project_install_check "$project" "$@"
}

release() {
	local repository=$project

	project_release_install_archive "$project" "$IMAGES" "$@"

	project_release_sources_git "$project" "$repository" "$@"
}

release_check() {
	local repository=$project

	project_release_install_archive_check "$project" "$IMAGES" "$@"

	project_release_check_sources_git "$project" "$repository" "$@"
}

clean() {
	project_clean "$project" "$@"
}
